// Code generated by mockery v2.36.0. DO NOT EDIT.

package mocktasks

import (
	models "github.com/azkazkazka/task-todo/models"
	mock "github.com/stretchr/testify/mock"
)

// ITaskService is an autogenerated mock type for the ITaskService type
type ITaskService struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: task
func (_m *ITaskService) CreateTask(task *models.Task) (interface{}, error) {
	ret := _m.Called(task)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Task) (interface{}, error)); ok {
		return rf(task)
	}
	if rf, ok := ret.Get(0).(func(*models.Task) interface{}); ok {
		r0 = rf(task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Task) error); ok {
		r1 = rf(task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTask provides a mock function with given fields: taskID, userID
func (_m *ITaskService) DeleteTask(taskID string, userID string) (interface{}, error) {
	ret := _m.Called(taskID, userID)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (interface{}, error)); ok {
		return rf(taskID, userID)
	}
	if rf, ok := ret.Get(0).(func(string, string) interface{}); ok {
		r0 = rf(taskID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(taskID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAllTasks provides a mock function with given fields: userID
func (_m *ITaskService) FetchAllTasks(userID string) (interface{}, error) {
	ret := _m.Called(userID)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchTask provides a mock function with given fields: taskID, userID
func (_m *ITaskService) FetchTask(taskID string, userID string) (interface{}, error) {
	ret := _m.Called(taskID, userID)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (interface{}, error)); ok {
		return rf(taskID, userID)
	}
	if rf, ok := ret.Get(0).(func(string, string) interface{}); ok {
		r0 = rf(taskID, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(taskID, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTask provides a mock function with given fields: task
func (_m *ITaskService) UpdateTask(task *models.Task) (interface{}, error) {
	ret := _m.Called(task)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.Task) (interface{}, error)); ok {
		return rf(task)
	}
	if rf, ok := ret.Get(0).(func(*models.Task) interface{}); ok {
		r0 = rf(task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*models.Task) error); ok {
		r1 = rf(task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewITaskService creates a new instance of ITaskService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewITaskService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ITaskService {
	mock := &ITaskService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
