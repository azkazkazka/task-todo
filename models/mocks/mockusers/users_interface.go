// Code generated by mockery v2.36.0. DO NOT EDIT.

package mockusers

import (
	models "github.com/azkazkazka/task-todo/models"
	mock "github.com/stretchr/testify/mock"
)

// IUserService is an autogenerated mock type for the IUserService type
type IUserService struct {
	mock.Mock
}

// AuthResponseToUserResponse provides a mock function with given fields: authResponse
func (_m *IUserService) AuthResponseToUserResponse(authResponse *models.AuthResponse) *models.UserResponse {
	ret := _m.Called(authResponse)

	var r0 *models.UserResponse
	if rf, ok := ret.Get(0).(func(*models.AuthResponse) *models.UserResponse); ok {
		r0 = rf(authResponse)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserResponse)
		}
	}

	return r0
}

// AuthenticateUser provides a mock function with given fields: loginRequest
func (_m *IUserService) AuthenticateUser(loginRequest *models.LoginRequest) (*models.UserResponse, error) {
	ret := _m.Called(loginRequest)

	var r0 *models.UserResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.LoginRequest) (*models.UserResponse, error)); ok {
		return rf(loginRequest)
	}
	if rf, ok := ret.Get(0).(func(*models.LoginRequest) *models.UserResponse); ok {
		r0 = rf(loginRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*models.LoginRequest) error); ok {
		r1 = rf(loginRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: userID
func (_m *IUserService) DeleteUser(userID string) (interface{}, error) {
	ret := _m.Called(userID)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchAllUsers provides a mock function with given fields:
func (_m *IUserService) FetchAllUsers() (interface{}, error) {
	ret := _m.Called()

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func() (interface{}, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: userID
func (_m *IUserService) GetUser(userID string) (interface{}, error) {
	ret := _m.Called(userID)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (interface{}, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) interface{}); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: userRequest
func (_m *IUserService) Register(userRequest *models.UserRequest) (interface{}, error) {
	ret := _m.Called(userRequest)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.UserRequest) (interface{}, error)); ok {
		return rf(userRequest)
	}
	if rf, ok := ret.Get(0).(func(*models.UserRequest) interface{}); ok {
		r0 = rf(userRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*models.UserRequest) error); ok {
		r1 = rf(userRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: user
func (_m *IUserService) UpdateUser(user *models.UpdateRequest) (interface{}, error) {
	ret := _m.Called(user)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*models.UpdateRequest) (interface{}, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*models.UpdateRequest) interface{}); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*models.UpdateRequest) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// findUserByUsernameOrEmail provides a mock function with given fields: username, email
func (_m *IUserService) findUserByUsernameOrEmail(username string, email string) (*models.AuthResponse, error) {
	ret := _m.Called(username, email)

	var r0 *models.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*models.AuthResponse, error)); ok {
		return rf(username, email)
	}
	if rf, ok := ret.Get(0).(func(string, string) *models.AuthResponse); ok {
		r0 = rf(username, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(username, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIUserService creates a new instance of IUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserService {
	mock := &IUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
